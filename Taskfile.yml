# https://taskfile.dev

version: "3"

vars:
  CERT_FOLDER: "{{.ROOT_DIR}}/certs"
  VIRTUALENV_FOLDER: "{{.ROOT_DIR}}/venv"

env:
  CERT_FOLDER: "{{.CERT_FOLDER}}"

dotenv: [.env, .env.default]

tasks:
  clean:
    desc: Removes all generated files, Docker volumes, and stops running containers
    cmds:
      - docker compose down -v
      - cmd: rm -rf {{.CERT_FOLDER}}
        ignore_error: true
      - cmd: rm -f {{.ROOT_DIR}}/config/connector.properties
        ignore_error: true
      - cmd: rm -f {{.ROOT_DIR}}/example/.env.example-script
        ignore_error: true
      - cmd: rm -rf {{.VIRTUALENV_FOLDER}}
        ignore_error: true
      - cd {{.ROOT_DIR}}/datasource && docker compose down -v

  certs:
    desc: Generates certificates and keystore for connector communication
    env:
      OUT_DIR: "{{.CERT_FOLDER}}"
    cmds:
      - mkdir -p {{.CERT_FOLDER}}
      - "{{.ROOT_DIR}}/create-certs.sh"
    status:
      - test -f {{.CERT_FOLDER}}/*.pfx

  config:
    desc: Creates configuration files by replacing environment variables in templates
    cmds:
      - >
        envsubst
        < {{.ROOT_DIR}}/config/connector.properties.tmpl
        > {{.ROOT_DIR}}/config/connector.properties
      - >
        envsubst
        < {{.ROOT_DIR}}/example/.env.example-script.tmpl
        > {{.ROOT_DIR}}/example/.env.example-script

  connector:
    desc: Initializes and starts the EDC connector and required dependencies in Docker containers
    cmds:
      - task: datasource
      - task: certs
      - task: config
      - docker compose up -d --wait

  virtualenv:
    desc: Sets up an isolated Python environment with required EDC client dependencies
    cmds:
      - virtualenv {{.VIRTUALENV_FOLDER}}
      - "{{.VIRTUALENV_FOLDER}}/bin/pip install -r {{.ROOT_DIR}}/example/requirements.txt"
    status:
      - test -d {{.VIRTUALENV_FOLDER}}

  example:
    desc: Executes the example data transfer script using the configured Python environment
    deps:
      - virtualenv
    cmds:
      - "{{.VIRTUALENV_FOLDER}}/bin/python {{.ROOT_DIR}}/example/example-pull.py"

  datasource:
    desc: Builds and starts the HTTP API data source in Docker
    dir: "{{.ROOT_DIR}}/datasource"
    cmds:
      - docker compose up -d --build --wait
